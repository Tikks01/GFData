// <auto-generated />
using GFDataApi.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GFDataApi.Migrations
{
    [DbContext(typeof(PgSqlDbContext))]
    partial class PgSqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GFDataApi.Data.ItemData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Attack")
                        .HasColumnType("double precision");

                    b.Property<int>("AttackRange")
                        .HasColumnType("integer");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("Attribute")
                        .HasColumnType("integer");

                    b.Property<long>("AttributeDamage")
                        .HasColumnType("bigint");

                    b.Property<short>("AttributeRate")
                        .HasColumnType("smallint");

                    b.Property<long>("AttributeResist")
                        .HasColumnType("bigint");

                    b.Property<int>("AuctionType")
                        .HasColumnType("integer");

                    b.Property<double>("AvgPhysicoDamage")
                        .HasColumnType("double precision");

                    b.Property<byte>("BackPackSize")
                        .HasColumnType("smallint");

                    b.Property<string>("BlockRate")
                        .HasColumnType("text");

                    b.Property<int>("CastingTime")
                        .HasColumnType("integer");

                    b.Property<short>("Con")
                        .HasColumnType("smallint");

                    b.Property<int>("CooldownGroup")
                        .HasColumnType("integer");

                    b.Property<int>("CooldownTime")
                        .HasColumnType("integer");

                    b.Property<short>("Dex")
                        .HasColumnType("smallint");

                    b.Property<short>("DodgeRate")
                        .HasColumnType("smallint");

                    b.Property<long>("DropIndex")
                        .HasColumnType("bigint");

                    b.Property<short>("DropRate")
                        .HasColumnType("smallint");

                    b.Property<long>("DueDateTime")
                        .HasColumnType("bigint");

                    b.Property<int>("ElfSkillId")
                        .HasColumnType("integer");

                    b.Property<string>("EnchanceEffectId")
                        .HasColumnType("text");

                    b.Property<int>("EnchantDuration")
                        .HasColumnType("integer");

                    b.Property<int>("EnchantId")
                        .HasColumnType("integer");

                    b.Property<int>("EnchantTimeType")
                        .HasColumnType("integer");

                    b.Property<int>("EnchantType")
                        .HasColumnType("integer");

                    b.Property<int>("EquipType")
                        .HasColumnType("integer");

                    b.Property<int>("ExpertEnchantId")
                        .HasColumnType("integer");

                    b.Property<short>("ExpertLevel")
                        .HasColumnType("smallint");

                    b.Property<int[]>("ExtraData")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("FlyEffectId")
                        .HasColumnType("text");

                    b.Property<short>("HitRate")
                        .HasColumnType("smallint");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text");

                    b.Property<short>("Int")
                        .HasColumnType("smallint");

                    b.Property<int>("ItemGroup")
                        .HasColumnType("integer");

                    b.Property<int>("ItemQuality")
                        .HasColumnType("integer");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<long>("LimitType")
                        .HasColumnType("bigint");

                    b.Property<byte>("LogLevel")
                        .HasColumnType("smallint");

                    b.Property<long>("MagicCriticalDamage")
                        .HasColumnType("bigint");

                    b.Property<short>("MagicCriticalRate")
                        .HasColumnType("smallint");

                    b.Property<double>("MagicDamage")
                        .HasColumnType("double precision");

                    b.Property<double>("MagicDefence")
                        .HasColumnType("double precision");

                    b.Property<short>("MagicalPenetration")
                        .HasColumnType("smallint");

                    b.Property<short>("MagicalPenetrationDefence")
                        .HasColumnType("smallint");

                    b.Property<double>("MaxDurability")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxHp")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxMp")
                        .HasColumnType("double precision");

                    b.Property<byte>("MaxSockets")
                        .HasColumnType("smallint");

                    b.Property<int>("MaxStack")
                        .HasColumnType("integer");

                    b.Property<long>("MissionPosId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModelFilename")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OpFlags")
                        .HasColumnType("bigint");

                    b.Property<long>("OpFlagsPlus")
                        .HasColumnType("bigint");

                    b.Property<short>("PhysicalPenetration")
                        .HasColumnType("smallint");

                    b.Property<short>("PhysicalPenetrationDefence")
                        .HasColumnType("smallint");

                    b.Property<long>("PhysicoCriticalDamage")
                        .HasColumnType("bigint");

                    b.Property<short>("PhysicoCriticalRate")
                        .HasColumnType("smallint");

                    b.Property<double>("PhysicoDefence")
                        .HasColumnType("double precision");

                    b.Property<double>("RandPhysicoDamage")
                        .HasColumnType("double precision");

                    b.Property<double>("RangeAttack")
                        .HasColumnType("double precision");

                    b.Property<short>("RebirthCount")
                        .HasColumnType("smallint");

                    b.Property<short>("RebirthMaxScore")
                        .HasColumnType("smallint");

                    b.Property<short>("RebirthScore")
                        .HasColumnType("smallint");

                    b.Property<long>("RestrictAlign")
                        .HasColumnType("bigint");

                    b.Property<long>("RestrictClass")
                        .HasColumnType("bigint");

                    b.Property<string>("RestrictEventPosId")
                        .HasColumnType("text");

                    b.Property<long>("RestrictGender")
                        .HasColumnType("bigint");

                    b.Property<long>("RestrictLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("RestrictMaxLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("RestrictPrestige")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopPriceType")
                        .HasColumnType("bigint");

                    b.Property<double>("SocketRate")
                        .HasColumnType("double precision");

                    b.Property<long>("SpecialDamage")
                        .HasColumnType("bigint");

                    b.Property<short>("SpecialRate")
                        .HasColumnType("smallint");

                    b.Property<int>("SpecialType")
                        .HasColumnType("integer");

                    b.Property<short>("Str")
                        .HasColumnType("smallint");

                    b.Property<double>("SysPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<string>("TargetIDs")
                        .HasColumnType("text");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("TreasureBuffs")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("UsedEffectId")
                        .HasColumnType("text");

                    b.Property<string>("UsedSoundName")
                        .HasColumnType("text");

                    b.Property<short>("Vol")
                        .HasColumnType("smallint");

                    b.Property<string>("WeaponEffectId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
